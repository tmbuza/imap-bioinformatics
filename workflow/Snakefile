# Configuration file containing all user-specified settings
configfile: "config/config.yaml"

# Function for aggregating list of raw sequencing files.
mothurSamples = list(set(glob_wildcards(os.path.join('data/raw/', '{sample}_{readNum, R[12]}_001.fastq.gz')).sample))

# Master rule for controlling workflow.
rule all:
	input:
		"data/process/final.0.03.shared",
		"data/process/final.0.03.cons.taxonomy",
		"data/process/final.0.03.count.summary"
		# "report/report.html",
		# "index.html"


###################################
#
# Part 1: Generate Reference and Mock Control Files
#

###################################

# Downloading and formatting SILVA and RDP reference databases. The v4 region is extracted from 
# SILVA database for use as reference alignment.
rule get_references:
	input:
		script="workflow/scripts/mothurReferences.sh"
	output:
		silvaV4="data/references/silva.v4.align",
		rdpFasta="data/references/trainset16_022016.pds.fasta",
		rdpTax="data/references/trainset16_022016.pds.tax"
	conda:
		"envs/mothur.yaml"
	shell:
		"bash {input.script}"


# Downloading the Zymo mock sequence files and extracting v4 region for error estimation.
rule get_zymo_mock:
	input:
		script="workflow/scripts/mothurMock.sh",
		silvaV4=rules.get_references.output.silvaV4
	output:
		mockV4="data/references/zymo.mock.16S.v4.fasta"
	conda:
		"envs/mothur.yaml"
	shell:
		"bash {input.script}"



###################################
#
# Part 2: Generate Shared Files 
#

###################################

# Generating master OTU shared file.
rule clean_sequences:
	input:
		script="workflow/scripts/mothurShared.sh",
		raw=expand('data/raw/{mothurSamples}_{readNum}_001.fastq.gz',
			mothurSamples = mothurSamples, readNum = config["readNum"]),
		refs=rules.get_references.output
	output:
		shared="data/process/final.0.03.shared",
		taxonomy="data/process/final.0.03.cons.taxonomy",
	conda:
		"envs/mothur.yaml"
	shell:
		"bash {input.script} data/raw/ {input.refs}"


# Counting number of reads in each of the new shared files.
rule count_shared:
	input:
		script="workflow/scripts/mothurCountShared.sh",
		shared="data/process/final.0.03.shared"
	output:
		count1="data/process/final.0.03.count.summary"
	conda:
		"envs/mothur.yaml"
	shell:
		"bash {input.script} {input.shared}"

#############
# REPORT
#############


rule get_dag:
	output:
		"dags/rulegraph.svg",
		"dags/rulegraph.png",
		"dags/dag.svg",
		"dags/dag.png"
	shell:
		"bash workflow/scripts/rulegraph.sh"


rule interactive_report:
	output:
		"report/report.html",
	shell:
		"bash workflow/scripts/interactive_report.sh"


rule render_index:
    input:
        rmd="index.Rmd",
        rulegraph="dags/rulegraph.svg",
        dag="dags/dag.svg"
    output:
        doc="index.html",
    log:
        "logs/render_index.log",
    shell:
        """
        R -e "library(rmarkdown); render('{input.rmd}')"
        """

