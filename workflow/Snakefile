from snakemake.utils import min_version

min_version("6.10.0")

# Configuration file containing all user-specified settings
configfile: "config/config.yml"

import os
import csv
import pandas as pd

METADATA = (
    pd.read_csv(config["samples"], sep="\t", dtype={"group": str})
    .set_index("group", drop=False)
    .sort_index()
)

GROUP = METADATA["group"]

PREFIX = ["count_table", "fasta", "map"]

report: "report/workflow.rst"

# Setup rules
include: "rules/mothur_process.smk"
include: "rules/remove_intermediate_files.smk"

include: "rules/rmd_report.smk"

# Master rule for controlling workflow.
rule all:
	input:
		"index.html",
		# "report.html",

		# Make files
		# expand("mothur_process/{dataset}.files", dataset=config["dataset"]),

		# OTU analysis
		# expand("mothur_process/{method}/final.dist", method="otu_analysis"),
		# expand("mothur_process/{method}/final.opti_mcc.0.03.rep.fasta", method="otu_analysis"),
		# expand("mothur_process/{method}/final.opti_mcc.list", method="otu_analysis"),
		# expand("mothur_process/{method}/final.opti_mcc.shared", method="otu_analysis"),
		# expand("mothur_process/{method}/final.pds.wang.pick.taxonomy", method="otu_analysis"),
		# expand("mothur_process/{method}/final.opti_mcc.0.03.cons.taxonomy", method="otu_analysis"),


		# Phylotype analysis
        expand("mothur_process/{method}/final.pds.wang.pick.tx.list", method="phylotype_analysis"),
        expand("mothur_process/{method}/final.pds.wang.pick.tx.rabund", method="phylotype_analysis"),
        expand("mothur_process/{method}/final.pds.wang.pick.tx.sabund", method="phylotype_analysis"),
        expand("mothur_process/{method}/final.pds.wang.pick.tx.shared", method="phylotype_analysis"),
        expand("mothur_process/{method}/final.pds.wang.pick.taxonomy", method="phylotype_analysis"),
        expand("mothur_process/{method}/final.pds.wang.pick.tx.1.cons.taxonomy", method="phylotype_analysis"),
        expand("mothur_process/{method}/final.pds.wang.pick.tx.1.lefse", method="phylotype_analysis"),
        expand("mothur_process/{method}/final.pds.wang.pick.tx.1.biom", method="phylotype_analysis"),


		# ASV analysis
        expand("mothur_process/{method}/final.asv.list", method="asv_analysis"),
        expand("mothur_process/{method}/final.asv.shared", method="asv_analysis"),
        expand("mothur_process/{method}/final.asv.ASV.cons.taxonomy", method="asv_analysis"),
        expand("mothur_process/{method}/final.asv.ASV.biom", method="asv_analysis"),
        expand("mothur_process/{method}/final.asv.ASV.lefse", method="asv_analysis"),


		# Phylogeny analysis
        expand("mothur_process/{method}/final.phylip.dist", method="phylogeny_analysis"),
        expand("mothur_process/{method}/final.pds.wang.pick.taxonomy", method="phylogeny_analysis"),
        expand("mothur_process/{method}/final.phylip.tre", method="phylogeny_analysis"),

		# Error rate analysis
        expand("mothur_process/{method}/final.pick.error.summary", method="error_analysis"),
        expand("mothur_process/{method}/final.pick.error.seq", method="error_analysis"),
        expand("mothur_process/{method}/final.pick.error.chimera", method="error_analysis"),
        expand("mothur_process/{method}/final.pick.error.seq.forward", method="error_analysis"),
        expand("mothur_process/{method}/final.pick.error.seq.reverse", method="error_analysis"),
        expand("mothur_process/{method}/final.pick.error.count", method="error_analysis"),
        expand("mothur_process/{method}/final.pick.error.matrix", method="error_analysis"),
        expand("mothur_process/{method}/final.pick.error.ref", method="error_analysis"),

		# Split shared files
		#  expand("mothur_process/{method}/sample.final.shared", method="otu_analysis"),
		#  expand("mothur_process/{method}/mock.final.shared", method="otu_analysis"),
		#  expand("mothur_process/{method}/control.final.shared", method="otu_analysis"),

		# Alpha and Beta diversity analysis
        expand("mothur_process/{method}/sample.final.count.summary", method="otu_analysis"),
        expand("mothur_process/{method}/sample.final.0.03.subsample.shared", method="otu_analysis"),
        expand("mothur_process/{method}/sample.final.groups.summary", method="otu_analysis"),
        expand("mothur_process/{method}/sample.final.groups.rarefaction", method="otu_analysis"),
        expand("mothur_process/{method}/sample.final.sharedsobs.0.03.lt.dist", method="otu_analysis"),
        expand("mothur_process/{method}/sample.final.thetayc.0.03.lt.dist", method="otu_analysis"),
        expand("mothur_process/{method}/sample.final.braycurtis.0.03.lt.dist", method="otu_analysis"),
        expand("mothur_process/{method}/sample.final.braycurtis.0.03.lt.tre", method="otu_analysis"),
        expand("mothur_process/{method}/sample.final.braycurtis.0.03.lt.pcoa.axes", method="otu_analysis"),
        expand("mothur_process/{method}/sample.final.braycurtis.0.03.lt.pcoa.loadings", method="otu_analysis"),
        expand("mothur_process/{method}/sample.final.braycurtis.0.03.lt.nmds.iters", method="otu_analysis"),
        expand("mothur_process/{method}/sample.final.braycurtis.0.03.lt.nmds.stress", method="otu_analysis"),
        expand("mothur_process/{method}/sample.final.braycurtis.0.03.lt.nmds.axes", method="otu_analysis"),

        expand("mothur_process/intermediate/{dataset}.trim.contigs.good.unique.good.filter.unique.precluster.{sample}.{prefix}", 
        outdir=OUTDIR, 
        dataset=config["dataset"], 
        sample=GROUP, 
        prefix=PREFIX)