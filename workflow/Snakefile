from snakemake.utils import min_version

min_version("6.10.0")

# Configuration file containing all user-specified settings
configfile: "config/config.yml"

report: "report/workflow.rst"

import os
import csv
import pandas as pd

# METADATA=pd.read_csv('resources/metadata/metadata.csv').loc[0:3]
# ACCESSIONS=METADATA['run'].tolist() # Specify the column containing the accession, in this demo is Run

include: "rules/mothur_process.smk"

# # Master rule for controlling workflow.
# rule all:
		# "index.html",	
		# "report.html",

		# expand("mothur_process/{dataset}.files", dataset=config["dataset"]),

		# "data/references/silva.v4.align",
		# "data/references/trainset16_022016.pds.fasta",
		# "data/references/trainset16_022016.pds.tax",
		# "data/references/zymo.mock.16S.v4.fasta",

		# "mothur_process/final.fasta",
		# "mothur_process/final.count_table",
		# "mothur_process/final.taxonomy",
		
		# Prepare input file
		# expand("mothur_process/{method}/final.fasta", method=config["mothurMethod"]),
		# expand("mothur_process/{method}/final.count_table", method=config["mothurMethod"]),
		# expand("mothur_process/{method}/final.taxonomy", method=config["mothurMethod"]),

		# OTU analysis

# Master rule for controlling workflow.
rule all:
	input:
		expand("mothur_process/{method}/final.dist", method="otu_analysis"),
		expand("mothur_process/{method}/final.opti_mcc.0.03.rep.fasta", method="otu_analysis"),
		expand("mothur_process/{method}/final.opti_mcc.list", method="otu_analysis"),
		expand("mothur_process/{method}/final.opti_mcc.shared", method="otu_analysis"),
		expand("mothur_process/{method}/final.pds.wang.pick.taxonomy", method="otu_analysis"),
		expand("mothur_process/{method}/final.opti_mcc.0.03.cons.taxonomy", method="otu_analysis"),

		# Phylotype analysis
        expand("mothur_process/{method}/final.pds.wang.pick.tx.list", method="phylotype_analysis"),
        expand("mothur_process/{method}/final.pds.wang.pick.tx.rabund", method="phylotype_analysis"),
        expand("mothur_process/{method}/final.pds.wang.pick.tx.sabund", method="phylotype_analysis"),
        expand("mothur_process/{method}/final.pds.wang.pick.tx.shared", method="phylotype_analysis"),
        expand("mothur_process/{method}/final.pds.wang.pick.taxonomy", method="phylotype_analysis"),
        expand("mothur_process/{method}/final.pds.wang.pick.tx.1.cons.taxonomy", method="phylotype_analysis"),
        expand("mothur_process/{method}/final.pds.wang.pick.tx.1.lefse", method="phylotype_analysis"),
        expand("mothur_process/{method}/final.pds.wang.pick.tx.1.biom", method="phylotype_analysis"),


		# ASV analysis
        expand("mothur_process/{method}/final.asv.list", method="asv_analysis"),
        expand("mothur_process/{method}/final.asv.shared", method="asv_analysis"),
        expand("mothur_process/{method}/final.asv.ASV.cons.taxonomy", method="asv_analysis"),
        expand("mothur_process/{method}/final.asv.ASV.biom", method="asv_analysis"),
        expand("mothur_process/{method}/final.asv.ASV.lefse", method="asv_analysis"),


		# Phylogeny analysis
        expand("mothur_process/{method}/final.phylip.dist", method="phylogeny_analysis"),
        expand("mothur_process/{method}/final.pds.wang.pick.taxonomy", method="phylogeny_analysis"),
        expand("mothur_process/{method}/final.phylip.tre", method="phylogeny_analysis"),

		# Error rate analysis
        expand("mothur_process/{method}/final.pick.error.summary", method="error_analysis"),
        expand("mothur_process/{method}/final.pick.error.seq", method="error_analysis"),
        expand("mothur_process/{method}/final.pick.error.chimera", method="error_analysis"),
        expand("mothur_process/{method}/final.pick.error.seq.forward", method="error_analysis"),
        expand("mothur_process/{method}/final.pick.error.seq.reverse", method="error_analysis"),
        expand("mothur_process/{method}/final.pick.error.count", method="error_analysis"),
        expand("mothur_process/{method}/final.pick.error.matrix", method="error_analysis"),
        expand("mothur_process/{method}/final.pick.error.ref", method="error_analysis"),

		# Split shared files
		 expand("mothur_process/{method}/sample.final.shared", method="otu_analysis"),
		 expand("mothur_process/{method}/mock.final.shared", method="otu_analysis"),
		 expand("mothur_process/{method}/control.final.shared", method="otu_analysis"),

		# Alpha and Beta diversity analysis
        expand("mothur_process/{method}/sample.final.count.summary", method="otu_analysis"),
        expand("mothur_process/{method}/sample.final.0.03.subsample.shared", method="otu_analysis"),
        expand("mothur_process/{method}/sample.final.groups.summary", method="otu_analysis"),
        expand("mothur_process/{method}/sample.final.groups.rarefaction", method="otu_analysis"),
        expand("mothur_process/{method}/sample.final.sharedsobs.0.03.lt.dist", method="otu_analysis"),
        expand("mothur_process/{method}/sample.final.thetayc.0.03.lt.dist", method="otu_analysis"),
        expand("mothur_process/{method}/sample.final.braycurtis.0.03.lt.dist", method="otu_analysis"),
        expand("mothur_process/{method}/sample.final.braycurtis.0.03.lt.tre", method="otu_analysis"),
        expand("mothur_process/{method}/sample.final.braycurtis.0.03.lt.pcoa.axes", method="otu_analysis"),
        expand("mothur_process/{method}/sample.final.braycurtis.0.03.lt.pcoa.loadings", method="otu_analysis"),
        expand("mothur_process/{method}/sample.final.braycurtis.0.03.lt.nmds.iters", method="otu_analysis"),
        expand("mothur_process/{method}/sample.final.braycurtis.0.03.lt.nmds.stress", method="otu_analysis"),
        expand("mothur_process/{method}/sample.final.braycurtis.0.03.lt.nmds.axes", method="otu_analysis"),




		# QIIME2

		# "qiime2_process/q2-sample-metadata.qzv",
		# "qiime2_process/demux.qzv",
		# "qiime2_process/rep-seqs.qza",
		# "qiime2_process/feature-table.qza",
		# "qiime2_process/stats.qza",

		# "qiime2_process/rep-seqs.qzv",
		# "qiime2_process/feature-table.qzv",
		# "qiime2_process/stats.qzv",

		# "qiime2_process/rep-seqs-dn-99.qza",
		# "qiime2_process/rep-seqs-dn-99.qzv",
		
		# "qiime2_process/table-cr-85.qza",
		# "qiime2_process/rep-seqs-cr-85.qza",

		# "qiime2_process/table-or-85.qza",
		# "qiime2_process/rep-seqs-or-85.qza",
		


# Get dot rule graphs
rule dot_rules_graph:
	output:
		"dags/rulegraph.svg",
	shell:
		"bash workflow/scripts/rules_dag.sh"


# Get project tree
rule project_tree:
    output:
        tree="results/project_tree.txt",
    shell:
        """
        bash workflow/scripts/tree.sh
        """

# Get smk static report
rule snakemake_html_report:
    output:
        smkhtml="report.html",
        # html2png="images/smkreport/screenshot.png",
    shell:
        """
        bash workflow/scripts/smk_html_report.sh
        """

# User styled report for GHPages
rule deploy_to_github_pages:
    output:
        doc="index.html",
    shell:
        """
        R -e "library(rmarkdown); render('index.Rmd')"
        """
