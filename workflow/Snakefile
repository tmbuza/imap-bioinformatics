from snakemake.utils import min_version

min_version("6.10.0")

# Configuration file containing all user-specified settings
configfile: "config/config.yaml"

# Function for aggregating list of raw sequencing files.
mothurSamples = list(set(glob_wildcards(os.path.join('data/mothur/raw/', '{sample}_{readNum, R[12]}_001.fastq.gz')).sample))

sraSamples = list(set(glob_wildcards(os.path.join('data/mothur/raw/', '{sample}_{sraNum, [12]}.fastq.gz')).sample))
# final_bioinfo_files.smk
# FINAL FILES        
# OTU ANALYSIS FILES

        # "data/mothur/references/silva.seed.align",
        # "data/mothur/references/silva.v4.align",
        # "data/mothur/references/silva.seed.ng.fasta",
        # "data/mothur/references/silva.v4.ng.fasta",
        # "data/mothur/references/trainset16_022016.pds.fasta",
        # "data/mothur/references/trainset16_022016.pds.tax",
        # "data/mothur/references/zymo.mock.16S.v4.fasta",
        # "data/mothur/references/zymo.mock.16S.fasta",

        # # make_contigs.smk
        # expand("{outdir}/{dataset}.trim.contigs.good.unique.fasta", outdir=config["outdir"], dataset=config["dataset"]),
        # expand("{outdir}/{dataset}.trim.contigs.good.count_table", outdir=config["outdir"], dataset=config["dataset"]),
        # expand("{outdir}/{dataset}.trim.contigs.good.unique.summary", outdir=config["outdir"], dataset=config["dataset"]),

        # # align_n_filter.smk
        # expand("{outdir}/{dataset}.trim.contigs.good.unique.good.filter.unique.fasta", outdir=config["outdir"], dataset=config["dataset"]),
        # expand("{outdir}/{dataset}.trim.contigs.good.unique.good.filter.count_table", outdir=config["outdir"], dataset=config["dataset"]),

        # # denoise_n_classify80.smk
        # expand("{outdir}/{dataset}.trim.contigs.good.unique.good.filter.unique.precluster.denovo.vsearch.pick.count_table", outdir=config["outdir"], dataset=config["dataset"]),
        # expand("{outdir}/{dataset}.trim.contigs.good.unique.good.filter.unique.precluster.denovo.vsearch.pick.pick.fasta", outdir=config["outdir"], dataset=config["dataset"]),
        # expand("{outdir}/{dataset}.trim.contigs.good.unique.good.filter.unique.precluster.denovo.vsearch.pick.pds.wang.pick.taxonomy", outdir=config["outdir"], dataset=config["dataset"]),
        # expand("{outdir}/{dataset}.trim.contigs.good.unique.good.filter.unique.precluster.denovo.vsearch.pick.pds.wang.accnos", outdir=config["outdir"], dataset=config["dataset"]),

        # ########################
        # # OTU CLASSIFICATION
        # ########################
        # # compute_seqdist003
        # expand("{outdir}/{dataset}.trim.contigs.good.unique.good.filter.unique.precluster.denovo.vsearch.pick.pick.dist", outdir=config["outdir"], dataset=config["dataset"]),
        
        # # cluster_otu97        
        # expand("{outdir}/{dataset}.trim.contigs.good.unique.good.filter.unique.precluster.denovo.vsearch.pick.pick.opti_mcc.list", outdir=config["outdir"], dataset=config["dataset"]),
        # # expand("{outdir}/{dataset}.trim.contigs.good.unique.good.filter.unique.precluster.denovo.vsearch.pick.pick.opti_mcc.steps", outdir=config["outdir"], dataset=config["dataset"]),
        # # expand("{outdir}/{dataset}.trim.contigs.good.unique.good.filter.unique.precluster.denovo.vsearch.pick.pick.opti_mcc.sensspec", outdir=config["outdir"], dataset=config["dataset"]),

        # # classify_otu97
        # expand("{outdir}/{dataset}.trim.contigs.good.unique.good.filter.unique.precluster.denovo.vsearch.pick.pick.opti_mcc.shared", outdir=config["outdir"], dataset=config["dataset"]),
        # # expand("{outdir}/{dataset}.trim.contigs.good.unique.good.filter.unique.precluster.denovo.vsearch.pick.pick.opti_mcc.0.03.cons.taxonomy", outdir=config["outdir"], dataset=config["dataset"]),
        # # expand("{outdir}/{dataset}.trim.contigs.good.unique.good.filter.unique.precluster.denovo.vsearch.pick.pick.opti_mcc.0.03.cons.tax.summary", outdir=config["outdir"], dataset=config["dataset"]),
        # # expand("{outdir}/{dataset}.trim.contigs.good.unique.good.filter.unique.precluster.denovo.vsearch.pick.pick.opti_mcc.0.03.rep.count_table", outdir=config["outdir"], dataset=config["dataset"]),
        # # expand("{outdir}/{dataset}.trim.contigs.good.unique.good.filter.unique.precluster.denovo.vsearch.pick.pick.opti_mcc.0.03.lefse", outdir=config["outdir"], dataset=config["dataset"]),
        # expand("{outdir}/{dataset}.trim.contigs.good.unique.good.filter.unique.precluster.denovo.vsearch.pick.pick.opti_mcc.0.03.biom", outdir=config["outdir"], dataset=config["dataset"]),

        
        # ########################
        # # PHYLOTYPE CLASSIFICATION
        # ########################

        #  # phylotype       
        # expand("{outdir}/{dataset}.trim.contigs.good.unique.good.filter.unique.precluster.denovo.vsearch.pick.pds.wang.pick.tx.list", outdir=config["outdir"], dataset=config["dataset"]),

        # # classify_phylotype
        # # expand("{outdir}/{dataset}.trim.contigs.good.unique.good.filter.unique.precluster.denovo.vsearch.pick.pds.wang.pick.tx.rabund", outdir=config["outdir"], dataset=config["dataset"]),
        # # expand("{outdir}/{dataset}.trim.contigs.good.unique.good.filter.unique.precluster.denovo.vsearch.pick.pds.wang.pick.tx.sabund", outdir=config["outdir"], dataset=config["dataset"]),
        # expand("{outdir}/{dataset}.trim.contigs.good.unique.good.filter.unique.precluster.denovo.vsearch.pick.pds.wang.pick.tx.shared", outdir=config["outdir"], dataset=config["dataset"]),
        # # expand("{outdir}/{dataset}.trim.contigs.good.unique.good.filter.unique.precluster.denovo.vsearch.pick.pds.wang.pick.tx.1.cons.taxonomy", outdir=config["outdir"], dataset=config["dataset"]),
        # # expand("{outdir}/{dataset}.trim.contigs.good.unique.good.filter.unique.precluster.denovo.vsearch.pick.pds.wang.pick.tx.1.cons.tax.summary", outdir=config["outdir"], dataset=config["dataset"]),
        # # expand("{outdir}/{dataset}.trim.contigs.good.unique.good.filter.unique.precluster.denovo.vsearch.pick.pds.wang.pick.tx.1.lefse", outdir=config["outdir"], dataset=config["dataset"]),
        # expand("{outdir}/{dataset}.trim.contigs.good.unique.good.filter.unique.precluster.denovo.vsearch.pick.pds.wang.pick.tx.1.biom", outdir=config["outdir"], dataset=config["dataset"]),
       

        # ########################
        # # ASV CLASSIFICATION
        # ########################
        # # expand("{outdir}/{dataset}.trim.contigs.good.unique.good.filter.unique.precluster.denovo.vsearch.pick.asv.list", outdir=config["outdir"], dataset=config["dataset"]),
        # expand("{outdir}/{dataset}.trim.contigs.good.unique.good.filter.unique.precluster.denovo.vsearch.pick.asv.shared", outdir=config["outdir"], dataset=config["dataset"]),
        # # expand("{outdir}/{dataset}.trim.contigs.good.unique.good.filter.unique.precluster.denovo.vsearch.pick.asv.ASV.cons.taxonomy", outdir=config["outdir"], dataset=config["dataset"]),
        # # expand("{outdir}/{dataset}.trim.contigs.good.unique.good.filter.unique.precluster.denovo.vsearch.pick.asv.ASV.cons.tax.summary", outdir=config["outdir"], dataset=config["dataset"]),
        # # expand("{outdir}/{dataset}.trim.contigs.good.unique.good.filter.unique.precluster.denovo.vsearch.pick.asv.ASV.lefse", outdir=config["outdir"], dataset=config["dataset"]),
        # # expand("{outdir}/{dataset}.trim.contigs.good.unique.good.filter.unique.precluster.denovo.vsearch.pick.asv.ASV.biom", outdir=config["outdir"], dataset=config["dataset"]),


        # #######################
        # PHYLOGENY CLASSIFICATION
        # #######################
        # "data/mothur/final/phylogeny_analysis/final.rep.phylip.dist",
        # "data/mothur/final/phylogeny_analysis/final.rep.phylip.tre",
        # expand("{outdir}/{dataset}.trim.contigs.good.unique.good.filter.unique.precluster.denovo.vsearch.pick.pick.dist", outdir=config["outdir"], dataset=config["dataset"]),
        # expand("{outdir}/{dataset}.trim.contigs.good.unique.good.filter.unique.precluster.denovo.vsearch.pick.pick.phylip.tre", outdir=config["outdir"], dataset=config["dataset"]),

# final_bioinfo_files.smk
# FINAL FILES        
# OTU ANALYSIS FILES
rule all:
    input:
        expand("{outdir}/{dataset}.trim.contigs.good.unique.good.filter.unique.precluster.denovo.vsearch.pick.pick.dist", outdir=config["outdir"], dataset=config["dataset"]),
        expand("{outdir}/{dataset}.trim.contigs.good.unique.good.filter.unique.precluster.denovo.vsearch.pick.pick.phylip.tre", outdir=config["outdir"], dataset=config["dataset"]),

        # expand("{finalotus}/final.list", finalotus=config["finalotus"]),
        # expand("{finalotus}/final.shared", finalotus=config["finalotus"]),
        # expand("{finalotus}/final.steps", finalotus=config["finalotus"]),
        # expand("{finalotus}/final.sensspec", finalotus=config["finalotus"]),
        # expand("{finalotus}/final.cons.taxonomy", finalotus=config["finalotus"]),
        # expand("{finalotus}/final.cons.tax.summary", finalotus=config["finalotus"]),
        # expand("{finalotus}/final.rep.fasta", finalotus=config["finalotus"]),
        # expand("{finalotus}/final.rep.count_table", finalotus=config["finalotus"]),
        # expand("{finalotus}/final.lefse", finalotus=config["finalotus"]),
        # expand("{finalotus}/final.biom", finalotus=config["finalotus"]),

# # PHYLOTYPE ANALYSIS FILES
#         expand("{finalphylotype}/final.tx.list", finalphylotype=config["finalphylotype"]),
#         expand("{finalphylotype}/final.tx.rabund", finalphylotype=config["finalphylotype"]),
#         expand("{finalphylotype}/final.tx.sabund", finalphylotype=config["finalphylotype"]),
#         expand("{finalphylotype}/final.tx.shared", finalphylotype=config["finalphylotype"]),
#         expand("{finalphylotype}/final.tx.cons.taxonomy", finalphylotype=config["finalphylotype"]),
#         expand("{finalphylotype}/final.tx.cons.tax.summary", finalphylotype=config["finalphylotype"]),
#         expand("{finalphylotype}/final.tx.lefse", finalphylotype=config["finalphylotype"]),
#         expand("{finalphylotype}/final.tx.biom", finalphylotype=config["finalphylotype"]),


# # ASV ANALYSIS FILES
#         expand("{finalasv}/final.asv.list", finalasv=config["finalasv"]),
#         expand("{finalasv}/final.asv.shared", finalasv=config["finalasv"]),
#         expand("{finalasv}/final.asv.cons.taxonomy", finalasv=config["finalasv"]),
#         expand("{finalasv}/final.asv.cons.tax.summary", finalasv=config["finalasv"]),
#         expand("{finalasv}/final.asv.lefse", finalasv=config["finalasv"]),
#         expand("{finalasv}/final.asv.biom", finalasv=config["finalasv"]),


# # # PHYLOGENY ANALYSIS FILES
        expand("{finalphylogeny}/final.phylip.dist", finalphylogeny=config["finalphylogeny"]),
        expand("{finalphylogeny}/final.phylip.tre", finalphylogeny=config["finalphylogeny"]),



# SPLITTING
        # # split_otutable
        # expand("{finalotus}/{group}.final.shared", finalotus=config["finalotus"], group=config["mothurGroups"]),

        # # subsample_otutable
        # expand("{finalotus}/{group}.final.0.03.subsample.shared", finalotus=config["finalotus"], group=config["mothurGroups"]),

        # # error_rate
        # expand("{erroranalysis}/errorinput.pick.error.summary", erroranalysis=config["erroranalysis"]),


        # # rules_dag.smk
        # "dags/rulegraph.svg",
        # "dags/rulegraph.png",
        # "dags/dag.svg",
        # "dags/dag.png",
        # "report/report.html",
        # "index.html",


include: "rules/get_references.smk"
include: "rules/make_files.smk"
include: "rules/make_contigs.smk"
include: "rules/align_n_filter.smk"
include: "rules/denoise_n_classify80.smk"
include: "rules/classify_otu97.smk"
include: "rules/classify_phylotype.smk"
include: "rules/classify_asv.smk"
include: "rules/classify_phylogeny.smk"
include: "rules/final_bioinfo_files.smk"
include: "rules/otutable_by_group.smk"
include: "rules/count_groups.smk"
include: "rules/subsample_otutable.smk" 
include: "rules/error_rate.smk"




# include: "rules/rules_dag.smk"
# include: "rules/interactive_report.smk"
# include: "rules/render_index.smk"



# rule github_page:
#     input:
#         rmd="index.Rmd",
#         rulegraph="dags/rulegraph.svg",
#     output:
#         "index.html",
#     shell:
#         """
#         R -e "library(rmarkdown); render('{input.rmd}')"
#         """